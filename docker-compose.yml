version: "2"
services:
  php71:
    build:
      context: .
      args:
        PHP_VERSION: 7.1
    container_name: php71
    restart: always
    working_dir: /var/www
    depends_on:
      - mysql
    volumes:
      - ${WEB_ROOT}:/var/www:cached
      - ${COMPOSER}/php71:/root/.composer/
      - ${PHP71_INI}:/usr/local/etc/php/php.ini
    environment:
      TZ: "$TZ"
      WEB_ENV: "local" # 信用飞项目使用
    ports: # hexo 需要 4000 端口
      - 4000:4000
    networks:
      - fronted
      - backend

  #  php73:
  #    build:
  #      context: .
  #      args:
  #        PHP_VERSION: 7.3
  #    container_name: php73
  #    restart: always
  #    working_dir: /var/www
  #    depends_on:
  #      - mysql
  #    volumes:
  #      - ${WEB_ROOT}:/var/www
  #      - ${COMPOSER}/php73:/root/.composer/
  #      - ${PHP73_INI}:/usr/local/etc/php/php.ini
  #    environment:
  #      TZ: "$TZ"
  #    networks:
  #      - fronted
  #      - backend

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      - php71
    #      - php73
    volumes:
      - ${WEB_ROOT}:/var/www:cached # 需要和 php 的目录一致
      - ${NGINX_CONF}:/etc/nginx/conf.d  # nginx 配置
      - ${LOG}/nginx:/var/log/nginx/  # nginx 日志
    ports:
      - ${NGINX_PORT}:80
    environment:
      TZ: "$TZ"
    networks:
      - fronted

  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    volumes:
      - ${MYSQL_DATA}:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: "$TZ"
    ports:
      - ${MYSQL_PORT}:3306
    networks:
      - backend

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    restart: always
    volumes:
      - ${REDIS_DATA}:/data
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - backend

# 定义两个前后端网络连接到同一个网络的容器，可以进行互连；而不同网络的容器则会被隔离。
#  所以在这个例子中，nginx 可以和 php 服务进行互连，php 也可以和 mysql 服务互连，因为它们连接到了同一个网络中； 而 nginx 和 mysql 并不处于同一网络，所以二者无法通讯，这起到了隔离的作用。
networks:
  fronted:
  backend:
